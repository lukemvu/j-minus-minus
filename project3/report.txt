1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<18>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<<4>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Long and Double Basic Types):
      Approach:

      I searched for all instances of INT inside of Parser.java and Type.java
      and added support for LONG and DOUBLE where appropriate.

      Issues and resolution:

      I had some issues with parsing double instead of long in the
      return type declaration for Fibonacci as well as some other local
      variables. The issue was from missing class descriptors, found after
      realizing that I had not updated the possible class representations in
      descriptorFor() method. A Google search brought me to the JVM field
      descriptor documentation. I added the proper descriptors "D" for double
      and "J" for longs.

   Problem 2 (Operators):
      Approach:

      Similarly to how it was done in project 1, new methods such as
      conditionalOrExpression() were added into Parser.java to reflect
       new changes to the j-- grammar.

      Issues and resolution:

      I had no issues.

   Problem 3 (Conditional Expression):
      Approach:

      The constructor for JConditionalExpression inside
      JConditionalExpression.java provided a blueprint on how to pass the
      correctly parsed parameters into building the object: int line,
      JExpression condition, JExpression thenPart, JExpression elsePart.

      Issues and resolution:

      I had no issues.

   Problem 4 (Do Statement):
      Approach:

      This was a freebie from the chapter 3 exercises. I'm calling statement()
      and parExpression() and checking for DO, WHILE, and SEMI tokens.

      Issues and resolution:

      I had no issues.

   Problem 5 (For Statement):
      Approach:

      The constructor for JForStatement outlined what needed to be passed in
      to construct the object. I examined some other methods that utilized
      an ArrayList<>.

      Issues and resolution:

      I could not figure out how to pass a list of JVariableDeclaration
      to the forInit() method and was hard stuck at this spot for a while.
      I eventually realized on mousing over the JVariableDeclaration object
      that it extended JStatement which cleared up confusion I had on the
      provided hint. I pulled the code from the
      localVariableDeclarationStatement() method instead of calling it because
      that method consumed the semicolon in its parse. I fixed an error in
      forInit() to use seeBasicType() || seeReferenceType() in order to branch
      between a type variable declaration and statement expression instead of
      using see(IDENTIFIER) which was just plain wrong. At this point, my parse
      was generating the correct AST but I had one last issue with a
      side-effect being generated. I realized I never implemented post-inc
      and pre-dec functionality to statementExpression() as it was hinted in
      problem 2.

   Problem 6 (Break Statement):
      Approach:

      Implementation was trivial. There is a JBreakStatement() function I can
      call to parse the break statement.

      Issues and resolution:

      I had no issues.

   Problem 7 (Continue Statement):
      Approach:

      Implementation was trivial. There is a JContinueStatement() function I
      can call to parse the continue statement.

      Issues and resolution:

      I had no issues.

   Problem 8 (Switch Statement):
      Approach:

      I used the hints to guide my approach, checking out the different
      constructors in JSwitchStatement.java to figure out what kind of objects
      needed to be passed around.

      Issues and resolution:

      It was not immediately clear what switchLabel() should return in the
      case of a DEFAULT being parsed. Looking at the json generating part of
      JSwitchStatement.java showed that if a switchLabel was null, it would
      add a Default tagged child. When to stop parsing switchLabels was not
      clear at first, eventually I realized I could just peek ahead to check
      for CASE or DEFAULT tokens.

   Problem 9 (Exception Handlers):
      Approach:

      Throw statement implementation was trivial. Again, studying the
      constructors for the various objects outlined what parameters needed to
      be passed in to build the try statement as well as modifying the
      memberDecl() method to implement throws.

      Issues and resolution:

      I had some issues with my AST throwing an empty set of braces in parsing
      the main method of the test case ("throws": [],). I tracked this down to
      some issue with exceptions ArrayList<TypeName> in the
      JMethodDeclaration(). I fixed the issue by setting ArrayList to null if
      there is no THROWS token parsed.

   Problem 10 (Interface Type Declaration):
      Approach:

      The grammars for the classDeclaration, classBody, and memberDecl are all
      similar to that of the interface side: interfaceDeclaration,
      interfaceBody, and interfaceMemberDecl. I was able to copy paste much
      of the code and reuse it with some modifications where the grammars
      differed. I added an additional option of parsing an
      interfaceDeclaration() to the typeDeclaration() method.

      Issues and resolution:

      I had no issues.

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   J. Michaud           TA          suggestions for debugging

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   The grammar.pdf from the website uses DEFLT as a token where it is DEFAULT
   from the previous homework. This threw me for a loop trying to ctrl-f
   DEFLT and not finding it anywhere.