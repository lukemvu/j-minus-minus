/* Generated By:JavaCC: Do not edit this line. JavaCCParserConstants.java */
package jminusminus;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BEGIN_SINGLE_COMMENT = 6;
  /** RegularExpression Id. */
  int END_SINGLE_COMMENT = 7;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int BEGIN_MULTI_COMMENT = 9;
  /** RegularExpression Id. */
  int END_MULTI_COMMENT = 10;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 11;
  /** RegularExpression Id. */
  int ABSTRACT = 12;
  /** RegularExpression Id. */
  int BOOLEAN = 13;
  /** RegularExpression Id. */
  int CHAR = 14;
  /** RegularExpression Id. */
  int CLASS = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int EXTENDS = 17;
  /** RegularExpression Id. */
  int FALSE = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int IMPORT = 20;
  /** RegularExpression Id. */
  int INSTANCEOF = 21;
  /** RegularExpression Id. */
  int INT = 22;
  /** RegularExpression Id. */
  int NEW = 23;
  /** RegularExpression Id. */
  int NULL = 24;
  /** RegularExpression Id. */
  int PACKAGE = 25;
  /** RegularExpression Id. */
  int PRIVATE = 26;
  /** RegularExpression Id. */
  int PROTECTED = 27;
  /** RegularExpression Id. */
  int PUBLIC = 28;
  /** RegularExpression Id. */
  int RETURN = 29;
  /** RegularExpression Id. */
  int STATIC = 30;
  /** RegularExpression Id. */
  int SUPER = 31;
  /** RegularExpression Id. */
  int THIS = 32;
  /** RegularExpression Id. */
  int TRUE = 33;
  /** RegularExpression Id. */
  int VOID = 34;
  /** RegularExpression Id. */
  int WHILE = 35;
  /** RegularExpression Id. */
  int COMMA = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int LBRACK = 38;
  /** RegularExpression Id. */
  int LCURLY = 39;
  /** RegularExpression Id. */
  int LPAREN = 40;
  /** RegularExpression Id. */
  int RPAREN = 41;
  /** RegularExpression Id. */
  int RBRACK = 42;
  /** RegularExpression Id. */
  int RCURLY = 43;
  /** RegularExpression Id. */
  int SEMI = 44;
  /** RegularExpression Id. */
  int ASSIGN = 45;
  /** RegularExpression Id. */
  int DEC = 46;
  /** RegularExpression Id. */
  int EQUAL = 47;
  /** RegularExpression Id. */
  int GT = 48;
  /** RegularExpression Id. */
  int INC = 49;
  /** RegularExpression Id. */
  int LAND = 50;
  /** RegularExpression Id. */
  int LE = 51;
  /** RegularExpression Id. */
  int LNOT = 52;
  /** RegularExpression Id. */
  int MINUS = 53;
  /** RegularExpression Id. */
  int PLUS = 54;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 55;
  /** RegularExpression Id. */
  int STAR = 56;
  /** RegularExpression Id. */
  int IDENTIFIER = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int DIGIT = 59;
  /** RegularExpression Id. */
  int INT_LITERAL = 60;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 61;
  /** RegularExpression Id. */
  int STRING_LITERAL = 62;
  /** RegularExpression Id. */
  int ESC = 63;
  /** RegularExpression Id. */
  int ERROR = 64;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<END_SINGLE_COMMENT>",
    "<SINGLE_LINE_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<MULTI_LINE_COMMENT>",
    "\"abstract\"",
    "\"boolean\"",
    "\"char\"",
    "\"class\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"if\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"super\"",
    "\"this\"",
    "\"true\"",
    "\"void\"",
    "\"while\"",
    "\",\"",
    "\".\"",
    "\"[\"",
    "\"{\"",
    "\"(\"",
    "\")\"",
    "\"]\"",
    "\"}\"",
    "\";\"",
    "\"=\"",
    "\"--\"",
    "\"==\"",
    "\">\"",
    "\"++\"",
    "\"&&\"",
    "\"<=\"",
    "\"!\"",
    "\"-\"",
    "\"+\"",
    "\"+=\"",
    "\"*\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INT_LITERAL>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<ESC>",
    "<ERROR>",
  };

}
