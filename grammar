// Copyright 2012- Bill Campbell, Swami Iyer and Bahar Akbal-Delibas.
//
// Syntactic grammar for j--, suitable for parsing by recursive descent.

compilationUnit ::= [ PACKAGE qualifiedIdentifier SEMI ]
                    { IMPORT  qualifiedIdentifier SEMI }
                    { typeDeclaration }
                    EOF

qualifiedIdentifier ::= IDENTIFIER { DOT IDENTIFIER }

typeDeclaration ::= modifiers classDeclaration

modifiers ::= { ABSTRACT | PRIVATE | PROTECTED | PUBLIC | STATIC }

classDeclaration ::= CLASS IDENTIFIER [ EXTENDS qualifiedIdentifier ] classBody

classBody ::= LCURLY { modifiers memberDecl } RCURLY

memberDecl ::= IDENTIFIER formalParameters block
             | ( VOID | type ) IDENTIFIER formalParameters ( block | SEMI )
             | type variableDeclarators SEMI

block ::= LCURLY { blockStatement } RCURLY

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | DO statement WHILE parExpression SEMI
            | IF parExpression statement [ ELSE statement ]
            | RETURN [ expression ] SEMI
            | SEMI
            | WHILE parExpression statement
            | statementExpression SEMI

formalParameters ::= LPAREN [ formalParameter { COMMA formalParameter } ] RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator { COMMA variableDeclarator }

variableDeclarator ::= IDENTIFIER [ ASSIGN variableInitializer ]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY [ variableInitializer { COMMA variableInitializer } [ COMMA ] ] RCURLY

arguments ::= LPAREN [ expression { COMMA expression } ] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | LONG | DOUBLE

referenceType ::= basicType LBRACK RBRACK { LBRACK RBRACK }
                | qualifiedIdentifier { LBRACK RBRACK }

statementExpression ::= expression

expression ::= assignmentExpression

assignmentExpression ::= conditionalOrExpression
                             [ ( ALSHIFT_ASSIGN | AND_ASSIGN | ARSHIFT_ASSIGN
                             | ASSIGN | DIV_ASSIGN | LRSHIFT_ASSIGN
                             | MINUS_ASSIGN | OR_ASSIGN | PLUS_ASSIGN
                             | REM_ASSIGN | STAR_ASSIGN | XOR_ASSIGN
                             ) assignmentExpression ]

conditionalOrExpression ::= conditionalAndExpression { LOR conditionalAndExpression }

conditionalAndExpression ::= inclusiveOrExpression { LAND inclusiveOrExpression }

inclusiveOrExpression ::= exclusiveOrExpression { OR exclusiveOrExpression }

exclusiveOrExpression ::= andExpression { XOR andExpression }

andExpression ::= equalityExpression { AND equalityExpression }

equalityExpression ::= relationalExpression { (EQUAL | NOT EQUAL) relationalExpression }

relationalExpression ::= shiftExpression [ ( GE | GT | LE | LT ) shiftExpression
                                           | INSTANCEOF referenceType ) ]

shiftExpression ::= additiveExpression { ( ALSHIFT | ARSHIFT| LRSHIFT ) additiveExpression }

additiveExpression ::= multiplicativeExpression { ( MINUS | PLUS ) multiplicativeExpression }

multiplicativeExpression ::= unaryExpression { (STAR | DIV | REM) unaryExpression }

unaryExpression ::= DEC unaryExpression
                  | INC unaryExpression
                  | ( MINUS | PLUS ) unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= NOT unaryExpression
                        | LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression
                        | LPAREN referenceType RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary { selector } { DEC | INC}

selector ::= DOT qualifiedIdentifier [ arguments ]
           | LBRACK expression RBRACK

primary ::= parExpression
          | NEW creator
          | THIS [ arguments ]
          | SUPER ( arguments | DOT IDENTIFIER [ arguments ] )
          | qualifiedIdentifier [ arguments ]
          | literal

creator ::= ( basicType | qualifiedIdentifier )
                ( arguments
                | LBRACK RBRACK { LBRACK RBRACK } [ arrayInitializer ]
                | newArrayDeclarator
                )

newArrayDeclarator ::= LBRACK expression RBRACK { LBRACK expression RBRACK } { LBRACK RBRACK }

literal ::= CHAR_LITERAL | DOUBLE_LITERAL | FALSE | INT_LITERAL | LONG_LITERAL | NULL | STRING_LITERAL | TRUE
