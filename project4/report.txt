1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<< >>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<< >>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Part I (Additions to JavaCC Scanner)

   Problem 1 (Multiline Comment)
      Approach:

      I had some initial confusion over what the ~ character was doing in.
      I checked out the documentation for javacc from:
      https://javacc.github.io/javacc/documentation/grammar.html
      After studying the grammar for single line comments I realized that it
      was just simply a not operator, e.g.: "/*" { ~( "*/" ) } "*/"
      The regular expression for a multi line comment included any
      characters that was not "*/" in between a pair of "/*" and "*/".

      I followed the code for single line comment to implement multiline
      similarly, entering into a multi line comment state after scanning a
      "/*", skipping all chars, then exiting back into the default state after
      scanning in a "*/".

      Issues and resolution:

      I had no issues here.

   Problem 2 (Operators)
      Approach:

      I added support for the 25 additional operators by listing them in the
      operator tokens section of j--.jj in the proper format.

      Issues and resolution:

      I had no issues here.

   Problem 3 (Reserved Words)
      Approach:

      I added support for the 16 additional reserved words by listing them in
      the reserved words tokens section of j--.jj in the proper format.

      Issues and resolution:

      I had no issues here.

   Problem 4 (Literals)
      Approach:

      I followed the lexical grammar for Java to add additional literal
      tokens to j--.jj. New private tokens such as DIGITS, EXPONENT, and
      SUFFIX were added as well. To implement optional tokens such as
      [ <EXPONENT> ], I used ( <EXPONENT> )?.

      Issues and resolution:

      I had a mess of incorrect lines that after a while I realized was due
      to a typo on the "e" and "E" scan. I originally had it as " e " and
      " E ".

   Part II (Additions to JavaCC Parser)

   Problem 5 (Long and Double Basic Types)
      Approach: ...

      Issues and resolution: ...

   Problem 6 (Operators)
      Approach: ...

      Issues and resolution: ...

   Problem 7 (Conditional Expression)
      Approach: ...

      Issues and resolution: ...

   Problem 8 (Do Statement)
      Approach: ...

      Issues and resolution: ...

   Problem 9 (For Statement)
      Approach: ...

      Issues and resolution: ...

   Problem 10 (Break Statement)
      Approach: ...

      Issues and resolution: ...

   Problem 11 (Continue Statement)
      Approach: ...

      Issues and resolution: ...

   Problem 12 (Switch Statement)
      Approach: ...

      Issues and resolution: ...

   Problem 13 (Exception Handlers)
      Approach: ...

      Issues and resolution: ...

   Problem 14 (Interface Type Declaration)
      Approach: ...

      Issues and resolution: ...

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   ...                ...          ...

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   ...
